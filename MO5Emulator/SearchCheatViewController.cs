// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using AppKit;
using Foundation;
using nMO5;

namespace MO5Emulator.Base.lproj
{
	public partial class SearchCheatViewController : NSViewController
	{
		private AppDelegate AppDelegate => (AppDelegate)NSApplication.SharedApplication.Delegate;
		private Memory Memory => AppDelegate.Machine.Memory;

        private HashSet<int> _adresses = new HashSet<int>();
        private int byteSize = 1;

        public SearchCheatViewController (IntPtr handle) : base (handle)
		{
		}

		partial void ByteSize(NSButton sender)
		{
			byteSize = (int)sender.Tag;
			((NSNumberFormatter)ValueTextField.Formatter).Minimum = 0;
			((NSNumberFormatter)ValueTextField.Formatter).Maximum = Math.Pow(2, byteSize * 8) - 1;
		}

		partial void Cancel(NSButton sender)
		{
            DismissViewController(this);
		}
		
        partial void Restart(NSButton sender)
        {
            _adresses.Clear();
            StatusTextField.StringValue = string.Empty;
        }

		partial void Search(NSButton sender)
        {
            Search();
        }

        private void Search()
        {
            var mem = Memory;
            var value = ValueTextField.IntValue;

            if (_adresses.Count == 0)
            {
                var newValues = Find(value, byteSize);
                foreach (var addr in newValues)
                {
                    _adresses.Add(addr);
                }
            }
            else
            {
                foreach (var addr in _adresses.ToList())
                {
                    if (Read(addr, byteSize) != value)
                    {
                        _adresses.Remove(addr);
                    }
                }
            }
            var msg = NSBundle.MainBundle.LocalizedString("{0} results found ({1:X})", null);
            StatusTextField.StringValue = string.Format(msg, _adresses.Count, _adresses.FirstOrDefault());
        }

        private List<int> Find(int value, int count)
		{
			var adresses = new List<int>();
			for (int addr = 0x2200; addr <= 0x9FFF; addr++)
			{
                var memValue = Read(addr, count);
				if (memValue == value)
				{
					adresses.Add(addr);
				}
			}
			return adresses;
		}

        private int Read(int address, int count)
        {
            if (count <= 0) throw new ArgumentOutOfRangeException(nameof(count), count, "count should be positive");
            if (count > 4) throw new ArgumentOutOfRangeException(nameof(count), count, "count should be lower than 5");

            var memValue = Memory.Read(address);
            for (var i = 1; i < count; i++)
            {
                memValue <<= 8;
                memValue |= Memory.Read(address + i);
            }
            return memValue;
        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            switch (segue.Identifier)
            {
                case "ViewAdresses":
                    if (_adresses.Count == 0)
                    {
                        Search();
                    }

                    var addressesViewController = segue.DestinationController as AddressesViewController;
                    var cheats = new NSMutableArray();
                    foreach (var address in _adresses)
                    {
                        cheats.Add(new CheatModel { Address = address, Size = byteSize });
					}
                    addressesViewController.SetCheat(cheats);
                    break;
            }
        }
	}
}
