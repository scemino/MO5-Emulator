// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using AppKit;
using nMO5;
using System.Collections.Generic;

namespace MO5Emulator.Base.lproj
{
	public partial class AddressesViewController : NSViewController
	{
		AppDelegate AppDelegate => (AppDelegate)NSApplication.SharedApplication.Delegate;
		private Machine Machine => AppDelegate.Machine;
		private Memory Memory => Machine.Memory;
                                            
		private NSMutableArray _cheats = new NSMutableArray();

		[Export("cheatModelArray")]
		public NSArray Cheats => _cheats;

		public AddressesViewController (IntPtr handle) : base (handle)
		{
		}

		[Export("setCheatModelArray:")]
		public void SetCheat(NSMutableArray array)
		{
			WillChangeValue("cheatModelArray");
			_cheats = array;
			DidChangeValue("cheatModelArray");
		}

		public override void ViewWillAppear()
		{
			AppDelegate.Machine.Stepping += OnStepping;
			base.ViewWillAppear();
		}

		public override void ViewWillDisappear()
		{
			AppDelegate.Machine.Stepping -= OnStepping;
			base.ViewWillDisappear();
		}

		private void OnStepping(object sender, EventArgs e)
		{
			UpdateValues();
		}

		private IEnumerable<CheatModel> GetCheats()
		{
			for (nuint i = 0; i < _cheats.Count; i++)
			{
				yield return _cheats.GetItem<CheatModel>(i);
			}
		}

		private void UpdateValues()
		{
			var mem = Memory;
			foreach (var cheat in GetCheats())
			{
				if (cheat.Size == 1)
				{
                    cheat.Value = mem.Read(cheat.Address);
				}
				else
				{
                    cheat.Value = mem.Read16(cheat.Address);
				}
			}
		}
	}
}
