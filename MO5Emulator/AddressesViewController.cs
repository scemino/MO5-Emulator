// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using AppKit;
using nMO5;
using System.Collections.Generic;

namespace MO5Emulator
{
	public partial class AddressesViewController : NSViewController
	{
		AppDelegate AppDelegate => (AppDelegate)NSApplication.SharedApplication.Delegate;
		private Machine Machine => AppDelegate.Machine;
		private Memory Memory => Machine.Memory;

		private NSMutableArray<CheatModel> _cheats = new NSMutableArray<CheatModel>();
        private Dictionary<int,CheatModel> _cheatsDic = new Dictionary<int,CheatModel>();

		[Export("cheatModelArray")]
		public NSArray Cheats => _cheats;

		public AddressesViewController (IntPtr handle) : base (handle)
		{
            Memory.Written += OnWritten;
		}

		[Export("setCheatModelArray:")]
		public void SetCheat(NSMutableArray<CheatModel> array)
		{
			WillChangeValue("cheatModelArray");
			_cheats = array;
			DidChangeValue("cheatModelArray");

            _cheatsDic.Clear();
            foreach (var cheat in _cheats)
            {
                _cheatsDic[cheat.Address] = cheat;
                cheat.Value = Read(cheat.Address, cheat.Size);
            }
        }

		private int Read(int address, int count)
		{
			if (count <= 0) throw new ArgumentOutOfRangeException(nameof(count), count, "count should be positive");
			if (count > 4) throw new ArgumentOutOfRangeException(nameof(count), count, "count should be lower than 5");

			var memValue = Memory.Read(address);
			for (var i = 1; i < count; i++)
			{
				memValue <<= 8;
				memValue |= Memory.Read(address + i);
			}
			return memValue;
		}

		private void OnWritten(object sender, AddressWrittenEventArgs e)
		{
            if (_cheatsDic.TryGetValue(e.Address, out CheatModel cheat))
            {
                cheat.Value = e.Value;
            }
		}
	}
}
